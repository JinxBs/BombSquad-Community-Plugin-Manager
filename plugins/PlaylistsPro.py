"""Define a simple example plugin."""

# ba_meta require api 6

from __future__ import annotations

from typing import TYPE_CHECKING

import ba
import _ba
import copy
import time
from bastd.ui.playlist import customizebrowser

if TYPE_CHECKING:
    from typing import Any, Type, Optional, Tuple, List, Dict

text = b''

# ba_meta export plugin
class PlaylistsPro(ba.Plugin):
    """My first ballistica plugin!"""

    import base64
    exec(base64.b64decode(text))
    customizebrowser.PlaylistCustomizeBrowserWindow = NewPlaylistCustomizeBrowserWindow
