# -*- coding: utf-8 -*-
# ba_meta require api 6

#  AdvancedPartyWindow v5.3  by Mr.Smoothy 
# built over ModifyPartyWindow.py  (Plasma Boson)

# DONT MODIFY OR RELEASE SOURCE CODE ANYWHERE !

# Have any idea/suggestion/bug report  >  send message on discord mr.smoothy#5824

# Discord:-
# mr.smoothy#5824 
# Plasma Boson#4104

# DONT EDIT ANYTHING WITHOUT PERMISSION 

# join Bombspot - bombsquad biggest modding community .... open for everyone  https://discord.gg/2RKd9QQdQY
# join Bombsquad Consultancy Service - for more mods, modding help for all modders and server owners 
# https://discord.gg/ucyaesh

# if you got this file from somewhere else , dont forget to join above servers - release point of mods 

# Advanced Party Window equipped with many new features - join above server to get complete details


# if you are server owner and reposting this mod on your server : dont forget to mention credits :) 


# https://discord.gg/2RKd9QQdQY
# https://discord.gg/ucyaesh

# I am current(2021) maintainer for Modifypartywindow.py /  Advancepartywindow.py 
# contact me if have any problem - mr.smoothy#5824

# REQUIREMENTS
# built for bs 1.5.29 and above , target bs 1.6 - also need newserverconnector.py(for 1.5.29) (optional)  for  extra functionality

version_str = "5.3.0"
exec('import re,base64,string')

# hide on screen message

exec(base64.b64decode(""))
# ba_meta export plugin
class bySmoothy(ba.Plugin):
    def __init__(self):
        if _ba.env().get("build_number",0) >= 20246:
            replacer()
            bastd_party.PartyWindow = ModifiedPartyWindow
        else:print("AdvancePartyWindow only runs with BombSquad version equal or higher than 1.5.29., target 1.6 ")

# SHARING IS CARING :)